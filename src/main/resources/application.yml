server:
  port: 8081
  servlet:
    contextPath: /member
  tomcat:
    accesslog:
       enabled: true

#database: h2

spring:
  mvc:
    view:
      prefix: /WEB-INF/views/
      suffix: .jsp
  sql:
    init:
      mode: embedded    # ALWAYS: 모든 데이터베이스에 sql 스크립트를 동작시킨다. / EMBDEDED: embedded 데이터베이스만 sql 스크립트를 동작시킨다. / NEVER: 모든 데이터베이스에 sql 스크립트를 동작시키지 않는다.
      schema-locations: classpath*:db/schema.sql
      data-locations: classpath*:db/data.sql
      #classpath*:db/${database}/schema.sql
      #classpath*:db/${database}/data.sql
  datasource:
     #---- MySQL
     #driver-class-name: com.mysql.cj.jdbc.Driver
     #url: jdbc:mysql://localhost:3306/InnoDB?serverTimezone=Asia/Seoul
     #---- HDDB
     #driver-class-name: org.h2.Driver
     #url: jdbc:h2:tcp://localhost/~/skims
     driver-class-name: net.sf.log4jdbc.sql.jdbcapi.DriverSpy
     url: jdbc:log4jdbc:h2:tcp://localhost/~/member
     username: sa
     password:
  jpa:
    open-in-view: false
    properties:
      hibernate:
        ddl-auto: create     # create, create-drop, validate, update, none
        naming:
          physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
          # SpringPhysicalNamingStrategy(Default)  =>  camel case를 underscore 형태로 변경
          # PhysicalNamingStrategyStandardImpl     =>  변수 이름을 그대로 사용
        use-new-id-generator-mappings: true
        format_sql: true
        use_sql_comments: true
    generate-ddl: true
    show_sql: true   # console sql
  h2:
    console:
      enabled: true
      path: /h2

logging:
  level:
    root: error   # trace, debug, info, warn, error, fatal
    org.springframework: info
    org.springframework.jdbc: info
    org.hibernate.type: off
    com.skims: debug

    jdbc:
      connection: off
      sqlonly: off
      sqltiming: info
      audit: off
      result: off
      resultsettable: info

springdoc:                                        #  출처: https://blog.jiniworld.me/83 [hello jiniworld:티스토리]
  version: '@project.version@'
  api-docs:
    path: /api-docs                               # spring boot 웹 애플리케이션의 api를 OpenAPI 3을 이용하여 json 형식화 한것의 경로
  default-consumes-media-type: application/json   # request media type 의 기본 값
  default-produces-media-type: application/json   # response media type 의 기본 값
  swagger-ui:                                     # 기본값 : 컨트롤러 내에서 정의한 api 메서드 순
    operations-sorter: method                     # 태그 내 각 api의 정렬 기준
    tags-sorter: alpha                            # alpha(알파벳 오름차순), method(http method 순)
    path: swagger-ui.html
    disable-swagger-default-url: true
    display-query-params-without-oauth2: false     # 기본 값 : false
                                                   # json화 된 config파일 대신 파라미터를 이용하여 swagger-ui에 접근하도록 합니다.
                                                   # api-docs(/api-docs) 및 swagger-ui.configUrl(/api-docs/swagger-config)를 두번씩 호출하는 것을 방지합니다.
    doc-expansion: none                            # 기본 값: list
                                                   # tag와 operation을 펼치는 방식에 대한 설정
                                                   # String=["list", "full", "none"]
                                                   # none으로 설정할 경우, tag 및 operation이 모두 닫힌채로 문서가 열립니다.
  paths-to-match:                                  # OpenAPI 3 로 문서화할 api path 리스트
    - /**

management:
  server:
#    port: 9001
#    address: 127.0.0.1
  endpoints:
    web:
#      base-path: /management
      exposure:
        include: "*"

#mybatis:  # type을 쉽게 쓰기 위해서 dto 패키지를 type-aliaes에 설정
#  type-aliases-package: com.sample.dto
#  mapper-locations: classpath:mapper/**/*.xml
#  # type-handlers-package: com.example.typehandler
#  configuration:
#    map-underscore-to-camel-case: true
#    default-fetch-size: 100
#    default-statement-timeout: 30
